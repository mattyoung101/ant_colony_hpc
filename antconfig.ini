; Ant simulation configuration file

[Simulation]
; number of ticks to simulate
simulate_ticks = 3500
; path to grid configuration file
grid_file = maps/map4.png
; prefix to append before the output PNG TAR file
output_prefix = results/
; seed to supply to random number generator (C++ type is long, so this can be a large value)
; if this value is 0, then an unpredictable source (e.g. system time in nanoseconds) is used
rng_seed = 2969231077
; whether or not to enable recording to PNG TAR
recording_enabled = true

[Colony]
; each ant colony starts with this many ants
starting_ants = 128
; diminish hunger by this many points per tick (out of 1.0)
hunger_drain = 0.002
; add hunger by this many points when an ant returns with food (out of 1.0)
hunger_replenish = 0.45
; number of ants to produce per tick if hunger meter is full
ants_per_tick = 10
; Chebyshev distance an ant can be from a colony when it's considered on the colony
; this makes the colony be more like a square rather than a single point
return_distance = 4

[Ants]
; chance (between 0.0 and 1.0, with 1.0 being 100% likely) that the ant will move in the direction
; it was assigned when it was spawned in
move_right_chance = 0.5
; ants die if they haven't been useful in this many ticks
kill_not_useful = 200
; ants use pheromone instead of random navigation if the pheromone they're referencing is above
; this value
use_pheromone = 0.35

[Pheromones]
; TODO maybe we need different gain factors for going to nest and going to colony
; add this strength to pheromone trail when an ant walks on it (out of 1.0)
gain_factor = 0.2
; pheromones above 0 get decayed by this much at the start of every tick (out of 1.0)
; the idea is to destroy routes that are no longer being used
decay_factor = 0.01
; fuzz the pheromone decay rate by this much as a percentage. for example, 0.25 means fuzz
; by +/- 25% of decay_factor. if this value is 0.0, then no fuzzing is performed
fuzz_factor = 0.25